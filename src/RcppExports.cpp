// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fwdNN2
List fwdNN2(const arma::mat& X, const List& model);
RcppExport SEXP _dnn_fwdNN2(SEXP XSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(fwdNN2(X, model));
    return rcpp_result_gen;
END_RCPP
}
// bwdNN2
List bwdNN2(const arma::mat& dy, List cache, const List& model);
RcppExport SEXP _dnn_bwdNN2(SEXP dySEXP, SEXP cacheSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dy(dySEXP);
    Rcpp::traits::input_parameter< List >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(bwdNN2(dy, cache, model));
    return rcpp_result_gen;
END_RCPP
}
// optimizerMomentum
List optimizerMomentum(List V, List dW, List W, double alpha, double lr, double lambda);
RcppExport SEXP _dnn_optimizerMomentum(SEXP VSEXP, SEXP dWSEXP, SEXP WSEXP, SEXP alphaSEXP, SEXP lrSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type V(VSEXP);
    Rcpp::traits::input_parameter< List >::type dW(dWSEXP);
    Rcpp::traits::input_parameter< List >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizerMomentum(V, dW, W, alpha, lr, lambda));
    return rcpp_result_gen;
END_RCPP
}
// optimizerNAG
List optimizerNAG(List V, List dW, List W, double alpha, double lr, double lambda);
RcppExport SEXP _dnn_optimizerNAG(SEXP VSEXP, SEXP dWSEXP, SEXP WSEXP, SEXP alphaSEXP, SEXP lrSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type V(VSEXP);
    Rcpp::traits::input_parameter< List >::type dW(dWSEXP);
    Rcpp::traits::input_parameter< List >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizerNAG(V, dW, W, alpha, lr, lambda));
    return rcpp_result_gen;
END_RCPP
}
// optimizerAdamG
List optimizerAdamG(List V1, List V2, List dW, List W, int epoch, double beta1, double beta2, double lr, double lambda);
RcppExport SEXP _dnn_optimizerAdamG(SEXP V1SEXP, SEXP V2SEXP, SEXP dWSEXP, SEXP WSEXP, SEXP epochSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP lrSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type V1(V1SEXP);
    Rcpp::traits::input_parameter< List >::type V2(V2SEXP);
    Rcpp::traits::input_parameter< List >::type dW(dWSEXP);
    Rcpp::traits::input_parameter< List >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type epoch(epochSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(optimizerAdamG(V1, V2, dW, W, epoch, beta1, beta2, lr, lambda));
    return rcpp_result_gen;
END_RCPP
}
// dnnFit2
List dnnFit2(const arma::mat& X, const arma::mat& y, const List& model, const List& control);
RcppExport SEXP _dnn_dnnFit2(SEXP XSEXP, SEXP ySEXP, SEXP modelSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(dnnFit2(X, y, model, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dnn_fwdNN2", (DL_FUNC) &_dnn_fwdNN2, 2},
    {"_dnn_bwdNN2", (DL_FUNC) &_dnn_bwdNN2, 3},
    {"_dnn_optimizerMomentum", (DL_FUNC) &_dnn_optimizerMomentum, 6},
    {"_dnn_optimizerNAG", (DL_FUNC) &_dnn_optimizerNAG, 6},
    {"_dnn_optimizerAdamG", (DL_FUNC) &_dnn_optimizerAdamG, 9},
    {"_dnn_dnnFit2", (DL_FUNC) &_dnn_dnnFit2, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_dnn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
